Meu Primeiro Projeto

git init (inicia um projeto git)
git status (verifica se tem alguma alteração nos meus arquivos)
git add "o arquivo que você alterou" (para incluir o que você alterou na hora de stage, posso utilizar o "." ao invés do nome do arquivo caso sejam multiplos arquivos e eu quero add todos)
git commit -m "Comentario sobre o que esta sendo alterado" (para commitar os arquivos alterados que foram adicionados ao stage)
git log (olhar os logs da alteração)
git log -3 (quando tenho muitos logs posso colocar o numero de commits que quero ver)
git log --oneline (mantem o hash e a descrição que foi feita no commit de forma resumida)
git reflog (mantem o hash e a descrição também, mas com alguma referencia, um pouco diferente do --oneline, mesmo que você de um reset, ele mantem os logs que nos outros logs do git não aparecem)
git rebase -i HEAD~5 (seleciona os ultimos 5 hashs e abre um arquivo com alguns comandos que possam ser utilizados dentro do proprio comando)
git cherry-pick "hash do commit" (ele junta ao commit que você esta no momento algo que você queria de um commit que você esta passando no comando)

git restore "nome do arquivo" (comando para restaurar a ultima versão do arquivo commitado)
git restore --staged "nome do arquivo" (comando para restaurar o arquivo e tira-lo do stage, quando dou um git add sem querer, isso pode ser interessante para quando dou um git add em todos meus arquivos porém só quero commitar 9 e tenho 10, uso esse comando e tiro o qual eu não quero)

git reset --hard "começo do hash que gerou o commit" (alterar o arquivo para a versão que estava no hash commitado)
- IMPORTANTE: se dermos um git log não vai aparecer os commits que foram feitos após esse hash, porém podemos dar o mesmo comando com o hash de outro commit para voltar nele, então não perdemos os commits"
git reset --soft "começo do hash que gerou o commit" (alterar o arquivo para a versão que estava no hash commitado, para a area de stage com as linhas que foram alteradas, para caso eu queira apenas mudar alguma coisa dentro do arquivo e não ele inteiro)

git clone "link do repositorio" (clona para minha maquina local o repositorio)
git config --local -e (serve para editar as configurações do repositorio, para o repositorio remoto)
git config --global -e (serve para editar as configurações do meu git global, para o meu git no geral)

git push (envia o commit para o meu repositorio remoto)
git pull (puxa arquivos que estão no meu repositorio remoto)

git merge (faz a fusão das branches que estão no meu repositorio, se forem commits diferentes ele faz normal, se caso tenha alteração em arquivos iguais, pode dar conflito)
git branch -d "nome da branch" (deleta a branch que eu estava trabalhando, depois de coloca-lá na main, porém todo historico continua lá dessa branch)
git checkout -b "nome da branch" (cria uma branch nova)
git checkout "nome da branch" (ir para a branch que eu quero)
git checkout - (ele volta para a branch que eu estava anteriormente)
git branch (ve quais branchs o repositorio tem e em qual eu estou no momento)

git stash (salva um arquivo que esta no stage em um outro diretorio temporario)
git stash -u (salva um arquivo que não necessariamente esta no stage em um outro diretorio temporario)
git stash list (lista quais arquivos estão nesse diretorio)
git stash pop (após ir para a outra branch onde deseja colocar esse arquivo, utilizar esse comando para jogar o arquivo na branch que estou utilizando, e deleta do diretorio temporario)
git stash apply stash@{"posição do item que eu quero"} (jogar o arquivo selecionado na branch que estou, não deleta do diretorio temporario)
git stash drop stash@{"posição do item que eu quero"} (parar deletar o arquivo selecionado do diretorio temporario)
git stash save "descrição do que eu desejo" (salva um arquivo que esta no stage em um outro diretorio temporario com uma descrição)
git stash save -u (ou --include-untracked) "descrição do que eu desejo" (salva um arquivo que não necessariamente esta no stage em um outro diretorio temporario com uma descrição)